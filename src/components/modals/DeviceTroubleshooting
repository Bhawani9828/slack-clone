import {
  AlertTriangle,
  Camera,
  Mic,
  RefreshCw,
  X,
  ExternalLink,
} from "lucide-react";
import { useState } from "react";

/**
 * @typedef {Object} DeviceTroubleshootingProps
 * @property {boolean} isOpen
 * @property {() => void} onClose
 * @property {string} error
 * @property {'camera' | 'microphone' | 'both'} deviceType
 * @property {() => void} onRetry
 */

export default function DeviceTroubleshooting({
  isOpen,
  onClose,
  error,
  deviceType,
  onRetry,
}) {
  const [isRetrying, setIsRetrying] = useState(false);

  const handleRetry = async () => {
    setIsRetrying(true);
    await onRetry();
    setTimeout(() => setIsRetrying(false), 1000);
  };

  if (!isOpen) return null;

  const getDeviceIcon = () => {
    if (deviceType === "camera") return <Camera className='w-6 h-6' />;
    if (deviceType === "microphone") return <Mic className='w-6 h-6' />;
    return (
      <div className='flex space-x-1'>
        <Camera className='w-5 h-5' />
        <Mic className='w-5 h-5' />
      </div>
    );
  };

  const getDeviceName = () => {
    if (deviceType === "camera") return "Camera";
    if (deviceType === "microphone") return "Microphone";
    return "Camera & Microphone";
  };

  const getErrorSpecificSteps = () => {
    if (error.includes("NotReadableError") || error.includes("in use")) {
      return [
        "Close other apps that might be using your camera/microphone (Zoom, Teams, Skype, etc.)",
        "Close other browser tabs that might be using your camera/microphone",
        "Check if your camera/microphone is being used by system apps",
        "Restart your browser if the issue persists",
      ];
    } else if (error.includes("NotAllowedError") || error.includes("denied")) {
      return [
        "Click the camera/microphone icon in your browser's address bar",
        'Select "Allow" for camera and microphone access',
        "If blocked, click the lock icon next to the URL and change permissions",
        "Refresh the page after changing permissions",
      ];
    } else if (error.includes("NotFoundError")) {
      return [
        "Make sure your camera/microphone is properly connected",
        "Check if your device drivers are installed and updated",
        "Try unplugging and reconnecting USB devices",
        "Restart your computer if the issue persists",
      ];
    }

    return [
      "Check if your camera/microphone is working in other apps",
      "Make sure browser permissions are granted",
      "Try refreshing the page",
      "Restart your browser if needed",
    ];
  };

  const getBrowserSpecificInstructions = () => {
    const userAgent = navigator.userAgent;

    if (userAgent.includes("Chrome")) {
      return {
        browser: "Chrome",
        steps: [
          "Click the camera icon in the address bar",
          'Select "Always allow" for this site',
          "Go to Settings > Privacy and security > Site Settings > Camera/Microphone",
          "Make sure the site is not blocked",
        ],
      };
    } else if (userAgent.includes("Firefox")) {
      return {
        browser: "Firefox",
        steps: [
          "Click the shield icon in the address bar",
          'Turn off "Enhanced Tracking Protection" for this site',
          "Click on the padlock icon and allow camera/microphone",
          "Refresh the page",
        ],
      };
    } else if (userAgent.includes("Safari")) {
      return {
        browser: "Safari",
        steps: [
          "Go to Safari > Preferences > Websites > Camera/Microphone",
          'Find this website and set it to "Allow"',
          "Close and reopen the tab",
          "Try the call again",
        ],
      };
    }

    return null;
  };

  const browserInstructions = getBrowserSpecificInstructions();

  return (
    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4'>
      <div className='bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto'>
        <div className='p-6'>
          {/* Header */}
          <div className='flex items-center justify-between mb-4'>
            <div className='flex items-center space-x-3'>
              <div className='text-orange-600'>
                <AlertTriangle className='w-8 h-8' />
              </div>
              <div>
                <h2 className='text-xl font-semibold text-gray-900'>
                  {getDeviceName()} Access Issue
                </h2>
                <p className='text-gray-600 text-sm'>
                  We need access to continue with the call
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className='text-gray-400 hover:text-gray-600'
            >
              <X className='w-6 h-6' />
            </button>
          </div>

          {/* Error Message */}
          <div className='bg-red-50 border border-red-200 rounded-lg p-4 mb-6'>
            <div className='flex items-start space-x-3'>
              <div className='text-red-600 mt-0.5'>{getDeviceIcon()}</div>
              <div>
                <h3 className='font-medium text-red-800'>Error Details</h3>
                <p className='text-red-700 text-sm mt-1'>{error}</p>
              </div>
            </div>
          </div>

          {/* Quick Steps */}
          <div className='mb-6'>
            <h3 className='font-semibold text-gray-900 mb-3'>
              Quick Fix Steps
            </h3>
            <ol className='list-decimal list-inside space-y-2 text-gray-700'>
              {getErrorSpecificSteps().map((step, index) => (
                <li
                  key={index}
                  className='text-sm'
                >
                  {step}
                </li>
              ))}
            </ol>
          </div>

          {/* Browser-specific instructions */}
          {browserInstructions && (
            <div className='mb-6'>
              <h3 className='font-semibold text-gray-900 mb-3'>
                {browserInstructions.browser} Instructions
              </h3>
              <ol className='list-decimal list-inside space-y-2 text-gray-700'>
                {browserInstructions.steps.map((step, index) => (
                  <li
                    key={index}
                    className='text-sm'
                  >
                    {step}
                  </li>
                ))}
              </ol>
            </div>
          )}

          {/* Device Check */}
          <div className='bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6'>
            <h3 className='font-medium text-blue-800 mb-2'>
              Check Your Devices
            </h3>
            <div className='space-y-2 text-sm text-blue-700'>
              <p>• Make sure your camera/microphone is connected and working</p>
              <p>• Test your devices in other applications first</p>
              <p>• Check if antivirus software is blocking access</p>
              <p>• Ensure your browser is up to date</p>
            </div>
          </div>

          {/* Help Links */}
          <div className='mb-6'>
            <h3 className='font-semibold text-gray-900 mb-3'>
              Need More Help?
            </h3>
            <div className='space-y-2'>
              <a
                href='https://support.google.com/chrome/answer/2693767'
                target='_blank'
                rel='noopener noreferrer'
                className='flex items-center text-blue-600 hover:text-blue-800 text-sm'
              >
                <ExternalLink className='w-4 h-4 mr-2' />
                Chrome Camera & Microphone Settings
              </a>
              <a
                href='https://support.mozilla.org/en-US/kb/how-manage-your-camera-and-microphone-permissions'
                target='_blank'
                rel='noopener noreferrer'
                className='flex items-center text-blue-600 hover:text-blue-800 text-sm'
              >
                <ExternalLink className='w-4 h-4 mr-2' />
                Firefox Camera & Microphone Permissions
              </a>
              <a
                href='https://support.apple.com/guide/safari/websites-ibrwe2159f50/mac'
                target='_blank'
                rel='noopener noreferrer'
                className='flex items-center text-blue-600 hover:text-blue-800 text-sm'
              >
                <ExternalLink className='w-4 h-4 mr-2' />
                Safari Website Permissions
              </a>
            </div>
          </div>

          {/* Action Buttons */}
          <div className='flex space-x-3'>
            <button
              onClick={handleRetry}
              disabled={isRetrying}
              className='flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white py-2 px-4 rounded-lg font-medium transition-colors flex items-center justify-center'
            >
              {isRetrying ? (
                <RefreshCw className='w-4 h-4 mr-2 animate-spin' />
              ) : (
                <RefreshCw className='w-4 h-4 mr-2' />
              )}
              Try Again
            </button>
            <button
              onClick={onClose}
              className='px-6 py-2 border border-gray-300 text-gray-700 hover:bg-gray-50 rounded-lg font-medium transition-colors'
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
